
R version 2.9.0 (2009-04-17)
Copyright (C) 2009 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ###################################################
> ### code chunk number 1: setup
> ###################################################
> rm(list = ls())
> if (!file.exists("tables")) dir.create("tables")
> set.seed(290875)
> options(prompt = "R> ", continue = "+  ",
+     width = 63, # digits = 4,
+     show.signif.stars = FALSE,
+     SweaveHooks = list(leftpar = function()
+         par(mai = par("mai") * c(1, 1.05, 1, 1)),
+         bigleftpar = function()
+         par(mai = par("mai") * c(1, 1.7, 1, 1))))
R> HSAURpkg <- require("HSAUR2")
Loading required package: HSAUR2
Loading required package: lattice
Loading required package: MASS
Loading required package: scatterplot3d
R> if (!HSAURpkg) stop("cannot load package ", sQuote("HSAUR2"))
R> rm(HSAURpkg)
R>  ### </FIXME> hm, R-2.4.0 --vanilla seems to need this
R> a <- Sys.setlocale("LC_ALL", "C")
R>  ### </FIXME>
R> book <- TRUE
R> refs <- cbind(c("AItR", "DAGD", "SI", "CI", "ANOVA", "MLR", "GLM",
+                  "DE", "RP", "GAM", "SA", "ALDI", "ALDII", "SIMC", "MA", "PCA",
+                  "MDS", "CA"), 1:18)
R> ch <- function(x) {
+      ch <- refs[which(refs[,1] == x),]
+      if (book) {
+          return(paste("Chapter~\\\\ref{", ch[1], "}", sep = ""))
+      } else {
+          return(paste("Chapter~", ch[2], sep = ""))
+      }
+  }
R> if (file.exists("deparse.R"))
+      source("deparse.R")
R> setHook(packageEvent("lattice", "attach"), function(...) {
+      lattice.options(default.theme =
+          function()
+              standard.theme("pdf", color = FALSE))
+      })
R> 
R> 
R> ###################################################
R> ### code chunk number 2: singlebook
R> ###################################################
R> book <- FALSE
R> 
R> 
R> ###################################################
R> ### code chunk number 3: DE-setup
R> ###################################################
R> x <- library("KernSmooth")
KernSmooth 2.22 installed
Copyright M. P. Wand 1997
R> x <- library("flexmix")
Loading required package: modeltools
Loading required package: stats4
Loading required package: multcomp
Loading required package: mvtnorm
Loading required package: survival
Loading required package: splines
R> x <- library("boot")

Attaching package: 'boot'


	The following object(s) are masked from package:survival :

	 aml 


	The following object(s) are masked from package:lattice :

	 melanoma 

R> 
R> 
R> ###################################################
R> ### code chunk number 4: DE-kernel-figs
R> ###################################################
R> rec <- function(x) (abs(x) < 1) * 0.5
R> tri <- function(x) (abs(x) < 1) * (1 - abs(x))
R> gauss <- function(x) 1/sqrt(2*pi) * exp(-(x^2)/2)
R> x <- seq(from = -3, to = 3, by = 0.001)
R> plot(x, rec(x), type = "l", ylim = c(0,1), lty = 1,
+       ylab = expression(K(x)))
R> lines(x, tri(x), lty = 2)
R> lines(x, gauss(x), lty = 3)
R> legend(-3, 0.8, legend = c("Rectangular", "Triangular",
+         "Gaussian"), lty = 1:3, title = "kernel functions",
+         bty = "n")
R> 
R> 
R> ###################################################
R> ### code chunk number 5: DE-options
R> ###################################################
R> w <- options("width")$w
R> options(width = 66)
R> 
R> 
R> ###################################################
R> ### code chunk number 6: DE-x-bumps-data
R> ###################################################
R> x <- c(0, 1, 1.1, 1.5, 1.9, 2.8, 2.9, 3.5)
R> n <- length(x)
R> 
R> 
R> ###################################################
R> ### code chunk number 7: DE-x-bumps-gaussian
R> ###################################################
R> xgrid <- seq(from = min(x) - 1, to = max(x) + 1, by = 0.01)
R> 
R> 
R> ###################################################
R> ### code chunk number 8: DE-x-bumps-bumps
R> ###################################################
R> h <- 0.4
R> bumps <- sapply(x, function(a) gauss((xgrid - a)/h)/(n * h))
R> 
R> 
R> ###################################################
R> ### code chunk number 9: DE-reoptions
R> ###################################################
R> options(width = w)
R> 
R> 
R> ###################################################
R> ### code chunk number 10: DE-x-bumps
R> ###################################################
R> plot(xgrid, rowSums(bumps), ylab = expression(hat(f)(x)),
+       type = "l", xlab = "x", lwd = 2)
R> rug(x, lwd = 2)
R> out <- apply(bumps, 2, function(b) lines(xgrid, b))
R> 
R> 
R> ###################################################
R> ### code chunk number 11: DE-epakernel-fig
R> ###################################################
R> epa <- function(x, y)
+      ((x^2 + y^2) < 1) * 2/pi * (1 - x^2 - y^2)
R> x <- seq(from = -1.1, to = 1.1, by = 0.05)
R> epavals <- sapply(x, function(a) epa(a, x))
R> persp(x = x, y = x, z = epavals, xlab = "x", ylab = "y",
+        zlab = expression(K(x, y)), theta = -35, axes = TRUE,
+        box = TRUE)
R> 
R> 
R> ###################################################
R> ### code chunk number 12: DE-faithful-density
R> ###################################################
R> data("faithful", package = "datasets")
R> x <- faithful$waiting
R> layout(matrix(1:3, ncol = 3))
R> hist(x, xlab = "Waiting times (in min.)", ylab = "Frequency",
+       probability = TRUE, main = "Gaussian kernel",
+       border = "gray")
R> lines(density(x, width = 12), lwd = 2)
R> rug(x)
R> hist(x, xlab = "Waiting times (in min.)", ylab = "Frequency",
+       probability = TRUE, main = "Rectangular kernel",
+       border = "gray")
R> lines(density(x, width = 12, window = "rectangular"), lwd = 2)
R> rug(x)
R> hist(x, xlab = "Waiting times (in min.)", ylab = "Frequency",
+       probability = TRUE, main = "Triangular kernel",
+       border = "gray")
R> lines(density(x, width = 12, window = "triangular"), lwd = 2)
R> rug(x)
R> 
R> 
R> ###################################################
R> ### code chunk number 13: DE-CYGOB1-contour
R> ###################################################
R> library("KernSmooth")
R> data("CYGOB1", package = "HSAUR2")
R> CYGOB1d <- bkde2D(CYGOB1, bandwidth = sapply(CYGOB1, dpik))
R> contour(x = CYGOB1d$x1, y = CYGOB1d$x2, z = CYGOB1d$fhat,
+          xlab = "log surface temperature",
+          ylab = "log light intensity")
R> 
R> 
R> ###################################################
R> ### code chunk number 14: DE-CYGOB1-persp
R> ###################################################
R> persp(x = CYGOB1d$x1, y = CYGOB1d$x2, z = CYGOB1d$fhat,
+        xlab = "log surface temperature",
+        ylab = "log light intensity",
+        zlab = "estimated density",
+        theta = -35, axes = TRUE, box = TRUE)
R> 
R> 
R> ###################################################
R> ### code chunk number 15: DE-faithful-optim
R> ###################################################
R> logL <- function(param, x) {
+      d1 <- dnorm(x, mean = param[2], sd = param[3])
+      d2 <- dnorm(x, mean = param[4], sd = param[5])
+      -sum(log(param[1] * d1 + (1 - param[1]) * d2))
+  }
R> startparam <- c(p = 0.5, mu1 = 50, sd1 = 3, mu2 = 80, sd2 = 3)
R> opp <- optim(startparam, logL, x = faithful$waiting,
+               method = "L-BFGS-B",
+               lower = c(0.01, rep(1, 4)),
+               upper = c(0.99, rep(200, 4)))
R> opp
$par
        p       mu1       sd1       mu2       sd2 
 0.360891 54.612125  5.872379 80.093414  5.867288 

$value
[1] 1034.002

$counts
function gradient 
      55       55 

$convergence
[1] 0

$message
[1] "CONVERGENCE: REL_REDUCTION_OF_F <= FACTR*EPSMCH"

R> 
R> 
R> ###################################################
R> ### code chunk number 16: DE-faithful-optim-print
R> ###################################################
R> print(opp[names(opp) != "message"])
$par
        p       mu1       sd1       mu2       sd2 
 0.360891 54.612125  5.872379 80.093414  5.867288 

$value
[1] 1034.002

$counts
function gradient 
      55       55 

$convergence
[1] 0

R> 
R> 
R> ###################################################
R> ### code chunk number 17: DE-attach-mclust
R> ###################################################
R> library("mclust")
by using mclust, you accept the license agreement in the LICENSE file
and at http://www.stat.washington.edu/mclust/license.txt
R> 
R> 
R> ###################################################
R> ### code chunk number 18: DE-faithful-mclust
R> ###################################################
R> library("mclust")
R> mc <- Mclust(faithful$waiting)
R> mc

 best model: equal variance with 2 components
R> 
R> 
R> ###################################################
R> ### code chunk number 19: DE-faithful-mclust-mu
R> ###################################################
R> mc$parameters$mean
       1        2 
54.61911 80.09384 
R> 
R> 
R> ###################################################
R> ### code chunk number 20: DE-faithful-mclust-para
R> ###################################################
R> sqrt(mc$parameters$variance$sigmasq)
[1] 5.86848
R> 
R> 
R> ###################################################
R> ### code chunk number 21: DE-faithful-flexmix
R> ###################################################
R> library("flexmix")
R> fl <- flexmix(waiting ~ 1, data = faithful, k = 2)
R> 
R> 
R> ###################################################
R> ### code chunk number 22: DE-faithful-flexmix-parameters
R> ###################################################
R> parameters(fl, component = 1)
                    Comp.1
coef.(Intercept) 54.628701
sigma             5.895234
R> parameters(fl, component = 2)
                    Comp.2
coef.(Intercept) 80.098582
sigma             5.871749
R> 
R> 
R> ###################################################
R> ### code chunk number 23: DE-faithful-2Dplot
R> ###################################################
R> opar <- as.list(opp$par)
R> rx <- seq(from = 40, to = 110, by = 0.1)
R> d1 <- dnorm(rx, mean = opar$mu1, sd = opar$sd1)
R> d2 <- dnorm(rx, mean = opar$mu2, sd = opar$sd2)
R> f <- opar$p * d1 + (1 - opar$p) * d2
R> hist(x, probability = TRUE, xlab = "Waiting times (in min.)",
+       border = "gray", xlim = range(rx), ylim = c(0, 0.06),
+       main = "")
R> lines(rx, f, lwd = 2)
R> lines(rx, dnorm(rx, mean = mean(x), sd = sd(x)), lty = 2,
+        lwd = 2)
R> legend(50, 0.06, lty = 1:2, bty = "n",
+         legend = c("Fitted two-component mixture density",
+                    "Fitted single normal density"))
R> 
R> 
R> ###################################################
R> ### code chunk number 24: DE-faithful-boot
R> ###################################################
R> library("boot")
R> fit <- function(x, indx) {
+      a <- Mclust(x[indx], minG = 2, maxG = 2)$parameters
+      if (a$pro[1] < 0.5)
+          return(c(p = a$pro[1], mu1 = a$mean[1],
+                                 mu2 = a$mean[2]))
+      return(c(p = 1 - a$pro[1], mu1 = a$mean[2],
+                                 mu2 = a$mean[1]))
+  }
R> 
R> 
R> ###################################################
R> ### code chunk number 25: DE-faithful-bootrun
R> ###################################################
R> bootparafile <- file.path(.find.package("HSAUR2"), "cache", "DE-bootpara.rda")
R> if (file.exists(bootparafile)) {
+      load(bootparafile)
+  } else {
+      bootpara <- boot(faithful$waiting, fit, R = 1000)
+  }
R> 
R> 
R> ###################################################
R> ### code chunk number 26: DE-faithful-p-ci
R> ###################################################
R> boot.ci(bootpara, type = "bca", index = 1)
BOOTSTRAP CONFIDENCE INTERVAL CALCULATIONS
Based on 1000 bootstrap replicates

CALL : 
boot.ci(boot.out = bootpara, type = "bca", index = 1)

Intervals : 
Level       BCa          
95%   ( 0.3041,  0.4233 )  
Calculations and Intervals on Original Scale
R> 
R> 
R> ###################################################
R> ### code chunk number 27: DE-faithful-mu1-ci
R> ###################################################
R> boot.ci(bootpara, type = "bca", index = 2)
BOOTSTRAP CONFIDENCE INTERVAL CALCULATIONS
Based on 1000 bootstrap replicates

CALL : 
boot.ci(boot.out = bootpara, type = "bca", index = 2)

Intervals : 
Level       BCa          
95%   (53.42, 56.07 )  
Calculations and Intervals on Original Scale
R> 
R> 
R> ###################################################
R> ### code chunk number 28: DE-faithful-mu2-ci
R> ###################################################
R> boot.ci(bootpara, type = "bca", index = 3)
BOOTSTRAP CONFIDENCE INTERVAL CALCULATIONS
Based on 1000 bootstrap replicates

CALL : 
boot.ci(boot.out = bootpara, type = "bca", index = 3)

Intervals : 
Level       BCa          
95%   (79.05, 81.01 )  
Calculations and Intervals on Original Scale
R> 
R> 
R> ###################################################
R> ### code chunk number 29: DE-bootplot
R> ###################################################
R> bootplot <- function(b, index, main = "") {
+      dens <- density(b$t[,index])
+      ci <- boot.ci(b, type = "bca", index = index)$bca[4:5]
+      est <- b$t0[index]
+      plot(dens, main = main)
+      y <- max(dens$y) / 10
+      segments(ci[1], y, ci[2], y, lty = 2)
+      points(ci[1], y, pch = "(")
+      points(ci[2], y, pch = ")")
+      points(est, y, pch = 19)
+  }
R> 
R> 
R> ###################################################
R> ### code chunk number 30: DE-faithful-boot-plot
R> ###################################################
R> layout(matrix(1:2, ncol = 2))
R> bootplot(bootpara, 2, main = expression(mu[1]))
R> bootplot(bootpara, 3, main = expression(mu[2]))
R> 
R> 
R> 
