
R version 2.9.0 (2009-04-17)
Copyright (C) 2009 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ###################################################
> ### chunk number 1: setup
> ###################################################
> rm(list = ls())
> if (!file.exists("tables")) dir.create("tables")
> set.seed(290875)
> options(prompt = "R> ", continue = "+  ",
+     width = 63, # digits = 4,
+     show.signif.stars = FALSE,
+     SweaveHooks = list(leftpar = function()
+         par(mai = par("mai") * c(1, 1.05, 1, 1)),
+         bigleftpar = function()
+         par(mai = par("mai") * c(1, 1.7, 1, 1))))
R> HSAURpkg <- require("HSAUR2")
Loading required package: HSAUR2
Loading required package: lattice
Loading required package: MASS
Loading required package: scatterplot3d
R> if (!HSAURpkg) stop("cannot load package ", sQuote("HSAUR2"))
R> rm(HSAURpkg)
R>  ### </FIXME> hm, R-2.4.0 --vanilla seems to need this
R> a <- Sys.setlocale("LC_ALL", "C")
R>  ### </FIXME>
R> book <- TRUE
R> refs <- cbind(c("AItR", "DAGD", "SI", "CI", "ANOVA", "MLR", "GLM",
+                  "DE", "RP", "GAM", "SA", "ALDI", "ALDII", "SIMC", "MA", "PCA",
+                  "MDS", "CA"), 1:18)
R> ch <- function(x) {
+      ch <- refs[which(refs[,1] == x),]
+      if (book) {
+          return(paste("Chapter~\\\\ref{", ch[1], "}", sep = ""))
+      } else {
+          return(paste("Chapter~", ch[2], sep = ""))
+      }
+  }
R> if (file.exists("deparse.R"))
+      source("deparse.R")
R> setHook(packageEvent("lattice", "attach"), function(...) {
+      lattice.options(default.theme =
+          function()
+              standard.theme("pdf", color = FALSE))
+      })
R> 
R> 
R> ###################################################
R> ### chunk number 2: singlebook
R> ###################################################
R> book <- FALSE
R> 
R> 
R> ###################################################
R> ### chunk number 3: RP-setup
R> ###################################################
R> library("vcd")
Loading required package: grid
Loading required package: colorspace
R> library("lattice")
R> library("randomForest")
randomForest 4.5-30
Type rfNews() to see new features/changes/bug fixes.
R> library("party")
Loading required package: survival
Loading required package: splines
Loading required package: modeltools
Loading required package: stats4
Loading required package: coin
Loading required package: mvtnorm
Loading required package: zoo

Attaching package: 'zoo'


	The following object(s) are masked from package:base :

	 as.Date.numeric 

Loading required package: sandwich
Loading required package: strucchange
R> library("partykit")

Attaching package: 'partykit'


	The following object(s) are masked from package:party :

	 ctree,
	 ctree_control,
	 edge_simple,
	 node_barplot,
	 node_boxplot,
	 node_inner,
	 node_terminal 


	The following object(s) are masked from package:coin :

	 logrank_trafo 

R> ltheme <- canonical.theme(color = FALSE) ## in-built B&W theme
R> ltheme$strip.background$col <- "transparent" ## change strip bg
R> lattice.options(default.theme = ltheme)
R> mai <- par("mai")
R> options(SweaveHooks = list(nullmai = function() { par(mai = rep(0, 4)) },
+                             twomai = function() { par(mai = c(0, mai[2], 0, 0)) },
+                             threemai = function() { par(mai = c(0, mai[2], 0.1, 0)) }))
R> numbers <- c("zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine")
R> 
R> 
R> ###################################################
R> ### chunk number 4: RP-bodyfat-rpart
R> ###################################################
R> library("rpart")
R> data("bodyfat", package = "mboost")
R> bodyfat_rpart <- rpart(DEXfat ~ age + waistcirc + hipcirc +
+      elbowbreadth + kneebreadth, data = bodyfat,
+      control = rpart.control(minsplit = 10))
R> 
R> 
R> ###################################################
R> ### chunk number 5: RP-bodyfat-plot
R> ###################################################
R> library("partykit")
R> plot(as.party(bodyfat_rpart), tp_args = list(id = FALSE))
R> 
R> 
R> ###################################################
R> ### chunk number 6: RP-bodyfat-cp
R> ###################################################
R> print(bodyfat_rpart$cptable)
          CP nsplit  rel error    xerror       xstd
1 0.66289544      0 1.00000000 1.0270918 0.16840424
2 0.09376252      1 0.33710456 0.4273989 0.09430024
3 0.07703606      2 0.24334204 0.4449342 0.08686150
4 0.04507506      3 0.16630598 0.3535449 0.06957080
5 0.01844561      4 0.12123092 0.2642626 0.05974575
6 0.01818982      5 0.10278532 0.2855892 0.06221393
7 0.01000000      6 0.08459549 0.2785367 0.06242559
R> opt <- which.min(bodyfat_rpart$cptable[,"xerror"])
R> 
R> 
R> ###################################################
R> ### chunk number 7: RP-bodyfat-prune
R> ###################################################
R> cp <- bodyfat_rpart$cptable[opt, "CP"]
R> bodyfat_prune <- prune(bodyfat_rpart, cp = cp)
R> 
R> 
R> ###################################################
R> ### chunk number 8: RP-bodyfat-pruneplot
R> ###################################################
R> plot(as.party(bodyfat_prune), tp_args = list(id = FALSE))
R> 
R> 
R> ###################################################
R> ### chunk number 9: RP-bodyfat-predict
R> ###################################################
R> DEXfat_pred <- predict(bodyfat_prune, newdata = bodyfat)
R> xlim <- range(bodyfat$DEXfat)
R> plot(DEXfat_pred ~ DEXfat, data = bodyfat, xlab = "Observed",
+       ylab = "Predicted", ylim = xlim, xlim = xlim)
R> abline(a = 0, b = 1)
R> 
R> 
R> ###################################################
R> ### chunk number 10: RP-seed-again
R> ###################################################
R> set.seed(290875)
R> 
R> 
R> ###################################################
R> ### chunk number 11: RP-glaucoma-rpart
R> ###################################################
R> data("GlaucomaM", package = "ipred")
R> glaucoma_rpart <- rpart(Class ~ ., data = GlaucomaM,
+      control = rpart.control(xval = 100))
R> glaucoma_rpart$cptable
          CP nsplit rel error    xerror       xstd
1 0.65306122      0 1.0000000 1.5306122 0.06054391
2 0.07142857      1 0.3469388 0.3877551 0.05647630
3 0.01360544      2 0.2755102 0.3775510 0.05590431
4 0.01000000      5 0.2346939 0.4489796 0.05960655
R> opt <- which.min(glaucoma_rpart$cptable[,"xerror"])
R> cp <- glaucoma_rpart$cptable[opt, "CP"]
R> glaucoma_prune <- prune(glaucoma_rpart, cp = cp)
R> 
R> 
R> ###################################################
R> ### chunk number 12: RP-glaucoma-plot
R> ###################################################
R> plot(as.party(glaucoma_prune), tp_args = list(id = FALSE))
R> 
R> 
R> ###################################################
R> ### chunk number 13: RP-glaucoma-cp
R> ###################################################
R> nsplitopt <- vector(mode = "integer", length = 25)
R> for (i in 1:length(nsplitopt)) {
+      cp <- rpart(Class ~ ., data = GlaucomaM)$cptable
+      nsplitopt[i] <- cp[which.min(cp[,"xerror"]), "nsplit"]
+  }
R> table(nsplitopt)
nsplitopt
 1  2  5 
14  7  4 
R> 
R> 
R> ###################################################
R> ### chunk number 14: RP-glaucoma-bagg
R> ###################################################
R> trees <- vector(mode = "list", length = 25)
R> n <- nrow(GlaucomaM)
R> bootsamples <- rmultinom(length(trees), n, rep(1, n)/n)
R> mod <- rpart(Class ~ ., data = GlaucomaM,
+               control = rpart.control(xval = 0))
R> for (i in 1:length(trees))
+      trees[[i]] <- update(mod, weights = bootsamples[,i])
R> 
R> 
R> ###################################################
R> ### chunk number 15: RP-glaucoma-splits
R> ###################################################
R> table(sapply(trees, function(x) as.character(x$frame$var[1])))

phcg varg vari vars 
   1   14    9    1 
R> 
R> 
R> ###################################################
R> ### chunk number 16: RP-glaucoma-baggpred
R> ###################################################
R> classprob <- matrix(0, nrow = n, ncol = length(trees))
R> for (i in 1:length(trees)) {
+      classprob[,i] <- predict(trees[[i]],
+                               newdata = GlaucomaM)[,1]
+      classprob[bootsamples[,i] > 0,i] <- NA
+  }
R> 
R> 
R> ###################################################
R> ### chunk number 17: RP-glaucoma-avg
R> ###################################################
R> avg <- rowMeans(classprob, na.rm = TRUE)
R> predictions <- factor(ifelse(avg > 0.5, "glaucoma",
+                                          "normal"))
R> predtab <- table(predictions, GlaucomaM$Class)
R> predtab
           
predictions glaucoma normal
   glaucoma       77     16
   normal         21     82
R> 
R> 
R> ###################################################
R> ### chunk number 18: RP-glaucoma-sens
R> ###################################################
R> round(predtab[1,1] / colSums(predtab)[1] * 100)
glaucoma 
      79 
R> 
R> 
R> ###################################################
R> ### chunk number 19: RP-glaucoma-spez
R> ###################################################
R> round(predtab[2,2] / colSums(predtab)[2] * 100)
normal 
    84 
R> 
R> 
R> ###################################################
R> ### chunk number 20: RP-glaucoma-baggplot
R> ###################################################
R> library("lattice")
R> gdata <- data.frame(avg = rep(avg, 2),
+      class = rep(as.numeric(GlaucomaM$Class), 2),
+      obs = c(GlaucomaM[["varg"]], GlaucomaM[["vari"]]),
+      var = factor(c(rep("varg", nrow(GlaucomaM)),
+                     rep("vari", nrow(GlaucomaM)))))
R> panelf <- function(x, y) {
+             panel.xyplot(x, y, pch = gdata$class)
+             panel.abline(h = 0.5, lty = 2)
+         }
R> print(xyplot(avg ~ obs | var, data = gdata,
+         panel = panelf,
+         scales = "free", xlab = "",
+         ylab = "Estimated Class Probability Glaucoma"))
R> 
R> 
R> ###################################################
R> ### chunk number 21: RP-glaucoma-rf
R> ###################################################
R> library("randomForest")
R> rf <- randomForest(Class ~ ., data = GlaucomaM)
R> 
R> 
R> ###################################################
R> ### chunk number 22: RP-glaucoma-rf-oob
R> ###################################################
R> table(predict(rf), GlaucomaM$Class)
          
           glaucoma normal
  glaucoma       80     12
  normal         18     86
R> 
R> 
R> ###################################################
R> ### chunk number 23: RP-detach
R> ###################################################
R> detach("package:partykit")
R> 
R> 
R> ###################################################
R> ### chunk number 24: RP-bodyfat-ctree
R> ###################################################
R> library("party")
R> bodyfat_ctree <- ctree(DEXfat ~ age + waistcirc + hipcirc +
+      elbowbreadth + kneebreadth, data = bodyfat)
R> 
R> 
R> ###################################################
R> ### chunk number 25: RP-bodyfat-ctree-plot
R> ###################################################
R> plot(bodyfat_ctree)
R> 
R> 
R> ###################################################
R> ### chunk number 26: RP-glaucoma-ctree
R> ###################################################
R> glaucoma_ctree <- ctree(Class ~ ., data = GlaucomaM)
R> 
R> 
R> ###################################################
R> ### chunk number 27: RP-glaucoma-ctree-plot
R> ###################################################
R> plot(glaucoma_ctree)
R> 
R> 
R> 
