
R version 2.9.0 (2009-04-17)
Copyright (C) 2009 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ###################################################
> ### chunk number 1: setup
> ###################################################
> rm(list = ls())
> if (!file.exists("tables")) dir.create("tables")
> set.seed(290875)
> options(prompt = "R> ", continue = "+  ",
+     width = 63, # digits = 4,
+     show.signif.stars = FALSE,
+     SweaveHooks = list(leftpar = function()
+         par(mai = par("mai") * c(1, 1.05, 1, 1)),
+         bigleftpar = function()
+         par(mai = par("mai") * c(1, 1.7, 1, 1))))
R> HSAURpkg <- require("HSAUR2")
Loading required package: HSAUR2
Loading required package: lattice
Loading required package: MASS
Loading required package: scatterplot3d
R> if (!HSAURpkg) stop("cannot load package ", sQuote("HSAUR2"))
R> rm(HSAURpkg)
R>  ### </FIXME> hm, R-2.4.0 --vanilla seems to need this
R> a <- Sys.setlocale("LC_ALL", "C")
R>  ### </FIXME>
R> book <- TRUE
R> refs <- cbind(c("AItR", "DAGD", "SI", "CI", "ANOVA", "MLR", "GLM",
+                  "DE", "RP", "GAM", "SA", "ALDI", "ALDII", "SIMC", "MA", "PCA",
+                  "MDS", "CA"), 1:18)
R> ch <- function(x) {
+      ch <- refs[which(refs[,1] == x),]
+      if (book) {
+          return(paste("Chapter~\\\\ref{", ch[1], "}", sep = ""))
+      } else {
+          return(paste("Chapter~", ch[2], sep = ""))
+      }
+  }
R> if (file.exists("deparse.R"))
+      source("deparse.R")
R> setHook(packageEvent("lattice", "attach"), function(...) {
+      lattice.options(default.theme =
+          function()
+              standard.theme("pdf", color = FALSE))
+      })
R> 
R> 
R> ###################################################
R> ### chunk number 2: singlebook
R> ###################################################
R> book <- FALSE
R> 
R> 
R> ###################################################
R> ### chunk number 3: SI-setup
R> ###################################################
R> library("vcd")
Loading required package: grid
Loading required package: colorspace
R> if (!interactive()) {
+  print.htest <- function (x, digits = 4, quote = TRUE, prefix = "", ...)
+  {
+      cat("\n")
+      cat(strwrap(x$method, prefix = "\t"), sep = "\n")
+      cat("\n")
+      cat("data: ", x$data.name, "\n")
+      out <- character()
+      if (!is.null(x$statistic))
+          out <- c(out, paste(names(x$statistic), "=", format(round(x$statistic,
+              4))))
+      if (!is.null(x$parameter))
+          out <- c(out, paste(names(x$parameter), "=", format(round(x$parameter,
+              3))))
+      if (!is.null(x$p.value)) {
+          fp <- format.pval(x$p.value, digits = digits)
+          out <- c(out, paste("p-value", if (substr(fp, 1, 1) ==
+              "<") fp else paste("=", fp)))
+      }
+      cat(strwrap(paste(out, collapse = ", ")), sep = "\n")
+      if (!is.null(x$conf.int)) {
+          cat(format(100 * attr(x$conf.int, "conf.level")), "percent confidence interval:\n",
+              format(c(x$conf.int[1], x$conf.int[2])), "\n")
+      }
+      if (!is.null(x$estimate)) {
+          cat("sample estimates:\n")
+          print(x$estimate, ...)
+      }
+      cat("\n")
+      invisible(x)
+  }
+  }
R> 
R> 
R> ###################################################
R> ### chunk number 4: SI-roomwidth-data
R> ###################################################
R> data("roomwidth", package = "HSAUR2")
R> 
R> 
R> ###################################################
R> ### chunk number 5: SI-roomwidth-convert
R> ###################################################
R> convert <- ifelse(roomwidth$unit == "feet", 1, 3.28)
R> 
R> 
R> ###################################################
R> ### chunk number 6: SI-roomwidth-summary
R> ###################################################
R> tapply(roomwidth$width * convert, roomwidth$unit, summary)
$feet
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   24.0    36.0    42.0    43.7    48.0    94.0 

$metres
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  26.24   36.08   49.20   52.55   55.76  131.20 

R> tapply(roomwidth$width * convert, roomwidth$unit, sd)
    feet   metres 
12.49742 23.43444 
R> 
R> 
R> ###################################################
R> ### chunk number 7: SI-roomwidth-boxplot
R> ###################################################
R> layout(matrix(c(1,2,1,3), nrow = 2, ncol = 2, byrow = FALSE))
R> boxplot(I(width * convert) ~ unit, data = roomwidth,
+          ylab = "Estimated width (feet)",
+          varwidth = TRUE, names = c("Estimates in feet",
+          "Estimates in metres (converted to feet)"))
R> feet <- roomwidth$unit == "feet"
R> qqnorm(roomwidth$width[feet],
+         ylab = "Estimated width (feet)")
R> qqline(roomwidth$width[feet])
R> qqnorm(roomwidth$width[!feet],
+         ylab = "Estimated width (metres)")
R> qqline(roomwidth$width[!feet])
R> 
R> 
R> ###################################################
R> ### chunk number 8: SI-roomwidth-formula
R> ###################################################
R> I(width * convert) ~ unit
I(width * convert) ~ unit
R> 
R> 
R> ###################################################
R> ### chunk number 9: SI-roomwidth-tt-T-hide
R> ###################################################
R> tt <- t.test(I(width * convert) ~ unit, data = roomwidth,
+               var.equal = TRUE)
R> 
R> 
R> ###################################################
R> ### chunk number 10: SI-roomwidth-tt-T
R> ###################################################
R> t.test(I(width * convert) ~ unit, data = roomwidth,
+         var.equal = TRUE)

	Two Sample t-test

data:  I(width * convert) by unit 
t = -2.6147, df = 111, p-value = 0.01017
95 percent confidence interval:
 -15.572734  -2.145052 
sample estimates:
  mean in group feet mean in group metres 
            43.69565             52.55455 

R> 
R> 
R> ###################################################
R> ### chunk number 11: SI-roomwidth-tt-F
R> ###################################################
R> t.test(I(width * convert) ~ unit, data = roomwidth,
+         var.equal = FALSE)

	Welch Two Sample t-test

data:  I(width * convert) by unit 
t = -2.3071, df = 58.788, p-value = 0.02459
95 percent confidence interval:
 -16.54308  -1.17471 
sample estimates:
  mean in group feet mean in group metres 
            43.69565             52.55455 

R> 
R> 
R> ###################################################
R> ### chunk number 12: SI-roomwidth-wt
R> ###################################################
R> wilcox.test(I(width * convert) ~ unit, data = roomwidth,
+              conf.int = TRUE)

	Wilcoxon rank sum test with continuity correction

data:  I(width * convert) by unit 
W = 1145, p-value = 0.02815
95 percent confidence interval:
 -9.3599953 -0.8000423 
sample estimates:
difference in location 
             -5.279955 

R> 
R> 
R> ###################################################
R> ### chunk number 13: SI-roomwidth-wt-hide
R> ###################################################
R> pwt <- round(wilcox.test(I(width * convert) ~ unit, data =
+               roomwidth)$p.value, 3)
R> 
R> 
R> ###################################################
R> ### chunk number 14: SI-waves-data
R> ###################################################
R> data("waves", package = "HSAUR2")
R> 
R> 
R> ###################################################
R> ### chunk number 15: SI-wavese-boxplot
R> ###################################################
R> mooringdiff <- waves$method1 - waves$method2
R> layout(matrix(1:2, ncol = 2))
R> boxplot(mooringdiff, ylab = "Differences (Newton metres)",
+          main = "Boxplot")
R> abline(h = 0, lty = 2)
R> qqnorm(mooringdiff, ylab = "Differences (Newton metres)")
R> qqline(mooringdiff)
R> 
R> 
R> ###################################################
R> ### chunk number 16: SI-waves-tt
R> ###################################################
R> t.test(mooringdiff)

	One Sample t-test

data:  mooringdiff 
t = 0.9019, df = 17, p-value = 0.3797
95 percent confidence interval:
 -0.08258476  0.20591810 
sample estimates:
 mean of x 
0.06166667 

R> 
R> 
R> ###################################################
R> ### chunk number 17: SI-waves-wt
R> ###################################################
R> pwt <- round(wilcox.test(mooringdiff)$p.value, 3)
Warning message:
In wilcox.test.default(mooringdiff) :
  cannot compute exact p-value with ties
R> 
R> 
R> ###################################################
R> ### chunk number 18: SI-waves-wt
R> ###################################################
R> wilcox.test(mooringdiff)

	Wilcoxon signed rank test with continuity correction

data:  mooringdiff 
V = 109, p-value = 0.3165

Warning message:
In wilcox.test.default(mooringdiff) :
  cannot compute exact p-value with ties
R> 
R> 
R> ###################################################
R> ### chunk number 19: SI-water-data
R> ###################################################
R> data("water", package = "HSAUR2")
R> 
R> 
R> ###################################################
R> ### chunk number 20: SI-water-plot
R> ###################################################
R> nf <- layout(matrix(c(2, 0, 1, 3), 2, 2, byrow = TRUE),
+               c(2, 1), c(1, 2), TRUE)
R> psymb <- as.numeric(water$location)
R> plot(mortality ~ hardness, data = water, pch = psymb)
R> abline(lm(mortality ~ hardness, data = water))
R> legend("topright", legend = levels(water$location),
+         pch = c(1,2), bty = "n")
R> hist(water$hardness)
R> boxplot(water$mortality)
R> 
R> 
R> ###################################################
R> ### chunk number 21: SI-water-cor
R> ###################################################
R> cor.test(~ mortality + hardness, data = water)

	Pearson's product-moment correlation

data:  mortality and hardness 
t = -6.6555, df = 59, p-value = 1.033e-08
95 percent confidence interval:
 -0.7783208 -0.4826129 
sample estimates:
       cor 
-0.6548486 

R> 
R> 
R> ###################################################
R> ### chunk number 22: SI-water-cor
R> ###################################################
R> cr <- round(cor.test(~ mortality + hardness, data = water)$estimate, 3)
R> 
R> 
R> ###################################################
R> ### chunk number 23: SI-pistonrings-chisq-hide
R> ###################################################
R> chisqt <- chisq.test(pistonrings)
R> 
R> 
R> ###################################################
R> ### chunk number 24: SI-pistonrings-chisq
R> ###################################################
R> data("pistonrings", package = "HSAUR2")
R> chisq.test(pistonrings)

	Pearson's Chi-squared test

data:  pistonrings 
X-squared = 11.7223, df = 6, p-value = 0.06846

R> 
R> 
R> ###################################################
R> ### chunk number 25: SI-pistonrings-resid
R> ###################################################
R> chisq.test(pistonrings)$residuals
          leg
compressor      North     Centre      South
        C1  0.6036154  1.6728267 -1.7802243
        C2  0.1429031  0.2975200 -0.3471197
        C3 -0.3251427 -0.4522620  0.6202463
        C4 -0.4157886 -1.4666936  1.4635235
R> 
R> 
R> ###################################################
R> ### chunk number 26: SI-assoc-plot
R> ###################################################
R> library("vcd")
R> assoc(pistonrings)
R> 
R> 
R> ###################################################
R> ### chunk number 27: SI-rearrests-data
R> ###################################################
R> data("rearrests", package = "HSAUR2")
R> rearrests
             Juvenile court
Adult court   Rearrest No rearrest
  Rearrest         158         515
  No rearrest      290        1134
R> 
R> 
R> ###################################################
R> ### chunk number 28: SI-rearrests-mcnemar
R> ###################################################
R> mcs <- round(mcnemar.test(rearrests, correct = FALSE)$statistic, 2)
R> 
R> 
R> ###################################################
R> ### chunk number 29: SI-arrests-mcnemar
R> ###################################################
R> mcnemar.test(rearrests, correct = FALSE)

	McNemar's Chi-squared test

data:  rearrests 
McNemar's chi-squared = 62.8882, df = 1, p-value =
2.188e-15

R> 
R> 
R> ###################################################
R> ### chunk number 30: SI-arrests-binom
R> ###################################################
R> binom.test(rearrests[2], n = sum(rearrests[c(2,3)]))

	Exact binomial test

data:  rearrests[2] and sum(rearrests[c(2, 3)]) 
number of successes = 290, number of trials = 805,
p-value = 1.918e-15
95 percent confidence interval:
 0.3270278 0.3944969 
sample estimates:
probability of success 
             0.3602484 

R> 
R> 
R> 
